import React, { useState, useEffect, useRef } from 'react';
import { Container, Typography, Box, Grid, useTheme, useMediaQuery } from '@mui/material';
import { keyframes } from '@emotion/react';

// –ê–Ω–∏–º–∞—Ü–∏–∏
const blinkCaret = keyframes`
  from, to { border-color: transparent; }
  50% { border-color: #ffb300; }
`;

const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const glitch = keyframes`
  0% { transform: translate(0); }
  20% { transform: translate(-2px, 2px); }
  40% { transform: translate(-2px, -2px); }
  60% { transform: translate(2px, 2px); }
  80% { transform: translate(2px, -2px); }
  100% { transform: translate(0); }
`;

const About = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [isVisible, setIsVisible] = useState(false);
  const [displayedText, setDisplayedText] = useState('');
  const [currentIndex, setCurrentIndex] = useState(0);
  const sectionRef = useRef(null);

  const fullText = `1983 –≥–æ–¥, —à—Ç–∞—Ç –ò–Ω–¥–∏–∞–Ω–∞. –ú–∞–ª–µ–Ω—å–∫–∏–π –≥–æ—Ä–æ–¥–æ–∫ –•–æ—É–∫–∏–Ω—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —ç–ø–∏—Ü–µ–Ω—Ç—Ä–æ–º —Å–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, –∫–æ–≥–¥–∞ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏—Å—á–µ–∑–∞–µ—Ç –º–∞–ª—å—á–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –£–∏–ª–ª –ë–∞–π–µ—Ä—Å. –ï–≥–æ –¥—Ä—É–∑—å—è –Ω–∞—á–∏–Ω–∞—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–º–∏ —è–≤–ª–µ–Ω–∏—è–º–∏, –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–≤–æ—Ä–∞–º–∏ –∏ –æ–ø–∞—Å–Ω—ã–º–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏.\n\n–°–µ—Ä–∏–∞–ª —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—É—á–Ω–æ–π —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏, —Ö–æ—Ä—Ä–æ—Ä–∞ –∏ –Ω–æ—Å—Ç–∞–ª—å–≥–∏–∏ –ø–æ 80-–º, —Å–æ–∑–¥–∞–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–æ—Ä–∏–ª–∞ –º–∏–ª–ª–∏–æ–Ω—ã –∑—Ä–∏—Ç–µ–ª–µ–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.`;

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –≤ viewport
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
        }
      },
      { threshold: 0.3 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => observer.disconnect();
  }, []);

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  useEffect(() => {
    if (!isVisible) return;

    if (currentIndex < fullText.length) {
      const timer = setTimeout(() => {
        setDisplayedText(prev => prev + fullText[currentIndex]);
        setCurrentIndex(prev => prev + 1);
      }, 10); // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (–º–µ–Ω—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ)

      return () => clearTimeout(timer);
    }
  }, [currentIndex, isVisible, fullText]);

  return (
    <Box 
      ref={sectionRef}
      id="about"
      sx={{ 
        py: { xs: 8, md: 12 },
        background: 'linear-gradient(135deg, #0c0c2d 0%, #1a1a4a 50%, #0c0c2d 100%)',
        position: 'relative',
        overflow: 'hidden',
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        '&::before': {
          content: '""',
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: `
            radial-gradient(circle at 20% 30%, rgba(255, 179, 0, 0.05) 0%, transparent 50%),
            radial-gradient(circle at 80% 70%, rgba(230, 57, 70, 0.05) 0%, transparent 50%)
          `,
        }
      }}
    >
      <Container maxWidth="lg" sx={{ position: 'relative', zIndex: 2 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ */}
        <Box sx={{ textAlign: 'center', mb: { xs: 6, md: 8 } }}>
          <Typography 
            variant="h2"
            component="h2"
            sx={{
              fontFamily: '"Press Start 2P", cursive',
              color: '#ffb300',
              textShadow: '0 0 10px #ff0000',
              fontSize: { xs: '1.5rem', md: '2.2rem' },
              mb: 3,
              animation: `${glitch} 0.5s infinite`,
              animationPlayState: 'paused',
              '&:hover': {
                animationPlayState: 'running'
              }
            }}
          >
            –û –°–ï–†–ò–ê–õ–ï
          </Typography>
          
          <Box 
            sx={{ 
              width: 100, 
              height: 2, 
              background: 'linear-gradient(90deg, transparent, #ffb300, transparent)',
              mx: 'auto',
              mb: 4
            }}
          />
        </Box>

        <Grid container spacing={4} alignItems="center">
          {/* –¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å –Ω–∞—Å—Ç–æ—è—â–µ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—á–∞—Ç–∞–Ω–∏—è */}
          <Grid item xs={12} md={6}>
            <Box 
              sx={{
                //background: 'rgba(12, 12, 45, 0.7)',
                //backdropFilter: 'blur(10px)',
                //border: '1px solid rgba(255, 179, 0, 0.2)',
                p: { xs: 3, md: 4 },
                position: 'relative',
                minHeight: '300px'
              }}
            >
              <Box sx={{ position: 'relative' }}>
                <Typography 
                  variant="body1"
                  sx={{
                    color: '#ffffff',
                    fontFamily: '"Courier New", monospace',
                    lineHeight: 1.8,
                    fontSize: { xs: '0.9rem', md: '1rem' },
                    textAlign: 'justify',
                    whiteSpace: 'pre-wrap', // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                    minHeight: '200px'
                  }}
                >
                  {displayedText}
                  {/* –ú–∏–≥–∞—é—â–∏–π –∫—É—Ä—Å–æ—Ä */}
                  {currentIndex < fullText.length && (
                    <Box
                      component="span"
                      sx={{
                        width: '2px',
                        height: '1.2em',
                        background: '#ffb300',
                        animation: `${blinkCaret} 0.75s step-end infinite`,
                        marginLeft: '2px',
                        verticalAlign: 'text-bottom'
                      }}
                    />
                  )}
                </Typography>
              </Box>
            </Box>
          </Grid>

          {/* –ë–ª–æ–∫ —Å —Ñ–∞–∫—Ç–∞–º–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –≤—ã—Å–æ—Ç–æ–π */}
          <Grid item xs={12}>
            <Box 
              sx={{ 
                textAlign: 'center',
                mt: 8,
                animation: `${fadeIn} 1s ease-out ${currentIndex >= fullText.length ? 1 : 0}s forwards`,
                opacity: currentIndex >= fullText.length ? 1 : 0
              }}
            >
              <Typography 
                variant="h5"
                sx={{
                  fontFamily: '"Bebas Neue", sans-serif',
                  color: '#ffb300',
                  fontSize: { xs: '1.4rem', md: '1.8rem' },
                  mb: 4,
                  letterSpacing: '3px'
                }}
              >
                 –ò–ù–¢–ï–†–ï–°–ù–´–ï –§–ê–ö–¢–´ 
              </Typography>

              <Grid container spacing={3} justifyContent="center" alignItems="stretch">
                {[
                  { icon: 'üé¨', text: '–°–Ω—è—Ç–æ –±—Ä–∞—Ç—å—è–º–∏ –î–∞—Ñ—Ñ–µ—Ä', delay: 0 },
                  { icon: 'üèÜ', text: '7 –ø—Ä–µ–º–∏–π –≠–º–º–∏', delay: 0.2 },
                  { icon: '‚≠ê', text: '4 —Å–µ–∑–æ–Ω–∞', delay: 0.4 },
                  { icon: 'üåç', text: '190 —Å—Ç—Ä–∞–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', delay: 0.6 },
                  { icon: 'üì∫', text: '80-–µ –Ω–æ—Å—Ç–∞–ª—å–≥–∏—è', delay: 0.8 },
                  { icon: 'üîÆ', text: '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', delay: 1.0 }
                ].map((fact, index) => (
                  <Grid item xs={12} sm={6} md={4} key={index} sx={{ display: 'flex' }}>
                    <Box 
                      sx={{ 
                        animation: `${fadeIn} 0.8s ease-out ${fact.delay + (currentIndex >= fullText.length ? 1 : 0)}s forwards`,
                        opacity: currentIndex >= fullText.length ? 1 : 0,
                        transform: currentIndex >= fullText.length ? 'translateY(0)' : 'translateY(20px)',
                        p: 3,
                        background: 'rgba(255, 179, 0, 0.05)',
                        border: '1px solid rgba(255, 179, 0, 0.1)',
                        borderRadius: '4px',
                        transition: 'all 0.3s ease',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        justifyContent: 'center',
                        minHeight: '120px',
                        width: '200px',
                        textAlign: 'center',
                        '&:hover': {
                          background: 'rgba(255, 179, 0, 0.1)',
                          borderColor: 'rgba(255, 179, 0, 0.3)',
                          transform: 'translateY(-2px)'
                        }
                      }}
                    >
                      <Box 
                        sx={{ 
                          fontSize: '2rem',
                          mb: 1.5,
                          lineHeight: 1
                        }}
                      >
                        {fact.icon}
                      </Box>
                      <Typography 
                        variant="body2"
                        sx={{
                          color: '#ffffff',
                          fontFamily: '"Courier New", monospace',
                          fontSize: '0.9rem',
                          fontWeight: 'bold',
                          lineHeight: 1.3
                        }}
                      >
                        {fact.text}
                      </Typography>
                    </Box>
                  </Grid>
                ))}
              </Grid>
            </Box>
          </Grid>
        </Grid>

        {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–Ω–∏–∑—É */}
        <Box 
          sx={{ 
            textAlign: 'center',
            mt: 8,
            animation: `${fadeIn} 1s ease-out ${currentIndex >= fullText.length ? 2 : 0}s forwards`,
            opacity: currentIndex >= fullText.length ? 1 : 0
          }}
        >
          <Typography 
            variant="caption"
            sx={{
              color: '#ffb300',
              fontFamily: '"Press Start 2P", cursive',
              fontSize: '0.6rem',
              letterSpacing: '2px',
              opacity: 0.7
            }}
          >
            CLASSIFIED ‚Ä¢ TOP SECRET ‚Ä¢ EYES ONLY
          </Typography>
        </Box>
      </Container>
    </Box>
  );
};

export default About;